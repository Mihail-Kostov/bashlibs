#!/bin/bash
PWD=$(pwd)

my_real_dir() {
    if [[ $(type -t progdir) == function ]]
    then
        progdir
    else
        dirname $(realpath $(echo $0 | sed "s/$(basename $0)/bake/"))
    fi
}

source $(my_real_dir)/bake-intree-init > /dev/null 2>&1 \
    || $(bashlibs --load-base)
include verbose.sh
set_verbose_level_to_info
include bake_config.sh
include os_detection.sh

load_bakerc() {
    [[ -f $PWD/.bakerc ]] \
        && source $PWD/.bakerc

    [[ -z $PROJECTS ]] \
        && eexit "PROJECTS variable in .bakerc is not defined"
}

hosts() {
    args \
        | sed 's/-s//g' \
        | sed 's/--server//g'
}

projects_to_bake_cmdline() {
    local i

    for i in $PROJECTS
    do
        echo -n "-p $i "
    done
}

update_repositories() {
    local host

    for host in $(hosts)
    do
        ssh root@$host \
            apt-get update
    done
}

bake_all() {
    is_ubuntu \
        && update_repositories

    $(progdir)/bake \
        $(args) \
        $(projects_to_bake_cmdline)
}

run_tests() {
    [[ $PORTAGE_TREE_NAME == bashlibs ]] \
        || return

    for host in $(hosts)
    do
        ssh root@$host \
            bashlibs -v -v --test all
    done
}

all_debs() {
    local i

    for i in $PROJECTS
    do
        echo -n "/var/cache/apt/archives/${i}*.deb "
    done
}

force_install_of_all_debs() {
    local host=$1

    ssh root@$host \
        dpkg -i $(all_debs)
}

verify_all_installed() {
    local host

    is_ubuntu \
        || return

    for host in $(hosts)
    do
        force_install_of_all_debs $host

        ssh root@$host \
            apt-get install -f -y

        force_install_of_all_debs $host

        ssh root@$host \
            apt-get install -f -y
    done
}

main() {
    load_bakerc
    bake_all
    verify_all_installed
    run_tests
}
main
